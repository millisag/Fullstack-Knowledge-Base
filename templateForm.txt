Two types of forms:

template: angular infers the form object from the DOM

responsive: form is created programmatically and synchronized with the DOM

Validators: can be found at https://angular.io/api/forms/Validators. These are built-in validators.

For template-based forms, directives are required. Search for "validator" at https://angular.io/api?type=directive.

You can also enable HTML5 validation.

Import {formsmodule} from angular/forms to set up

Template example:
Tells angular what control is using ngModel and name=""
In ts use onSubmit(form: NgForm){

}

Submit in html: tells angular to provide access a form you created automatically <form (ngSubmit)="onSubmit(f)" #f="ngForm">

NgForm object


@Viewchild


@ViewChild('f') signupForm: NgForm;

onSubmit() {

}
Validation
<input
required>

built-in validator directives list 

creates a disabled submit button "f" referring to the #f="ngForm"

<button
  class="btn btn-primary"
  type="submit"
  [disabled]="!f.valid">Submit</button>

This adds red borders to invalid things on .css input.ng-invalid.ng-touched, select.ng-invalid, etc { border: 1px solid red; }

and help messages for user ngmodel <input #email="ngModel"> <span class="help-block" *ngIf="!email.valid && email.touched">Please enter a valid email!

This causes a warning line appears under email input if touched and nothing added or invalid email entered

ngModelGroup
<div id="user-data" ngModelGroup="userData">
Radio Buttons
Creates a databound radio button input <div class="radio" *ngFor="let gender of genders"> <input type="radio' name="gender" ngModel [value]="gender"> {{ gender }}

.setValue() to fill forms and override values
@ViewChild('f') signupForm: NgForm;

suggestUserName(){
  this.signupForm.form.patchValue({
    userData: {
      username: suggestedName
    }
  });
}
Using Form Data
user = {
  username:'',
  email: '',

}
submitted = false;

onSubmit(){
  this.submitted = true;
  this.user.username = this.signupForm.value.userData.username;
  etc.
}

referring to name="" in html div 

and in shown response in html
  <div *ngIf="submitted">
    <h3>Your Data</h3>
    <p>Username: {{ user.username }}</p>

Reset form:
onSubmit(){
  ...(all those other values)
  this.signupForm.reset();
}

Create form:
<form>
  <div class="form-group">   CSS class for looks (not angular)
    <label for="email">Mail</label>
    <input type="email" id="email" ngModel name="email" required email class="form-control" #email="ngModel">
    <span class="help-block" *ngIf="!email.valid && email.touched">Please enter a valid email!</span>

  <div class="form-group">
    <label for="subscription">Choose a Subscription</label>
    <select name="subscription" id="subscription" [ngModel]="selectedSubscription" class="form-control">
    <option *ngFor="let subscription of subscriptions"
    [value]="subscription">{{ subscription }}</option>

    in .ts
    subscriptions = ['Basic', 'Advanced', 'Pro'];
    selectedSubscription = 'Advanced';
    @ViewChild('signupForm') sgnForm: NgForm;

    OnSubmit(){
      console.log(this.sgnForm.value);
    }